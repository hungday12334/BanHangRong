package banhangrong.su25.Controller;

import banhangrong.su25.Entity.Users;
import banhangrong.su25.Repository.UsersRepository;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDateTime;
import java.util.Optional;

@Controller
public class BecomeSellerController {

    @Autowired
    private UsersRepository usersRepository;

    /**
     * Trang x√°c nh·∫≠n n√¢ng c·∫•p l√™n seller
     */
    @GetMapping("/become-seller")
    public String becomeSellerPage(Model model, HttpSession session) {
        // L·∫•y th√¥ng tin user hi·ªán t·∫°i
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth == null || !auth.isAuthenticated() || "anonymousUser".equals(auth.getPrincipal())) {
            return "redirect:/login?error=Please login first";
        }

        String username = auth.getName();
        Optional<Users> userOpt = usersRepository.findByUsername(username);
        
        if (userOpt.isEmpty()) {
            return "redirect:/login?error=User not found";
        }

        Users user = userOpt.get();
        
        // Ki·ªÉm tra n·∫øu ƒë√£ l√† seller r·ªìi
        if ("SELLER".equalsIgnoreCase(user.getUserType())) {
            return "redirect:/seller/dashboard";
        }

        model.addAttribute("user", user);
        return "customer/become-seller";
    }

    /**
     * X·ª≠ l√Ω n√¢ng c·∫•p l√™n seller
     */
    @PostMapping("/become-seller/upgrade")
    public String upgradeToSeller(RedirectAttributes redirectAttributes, HttpSession session) {
        // L·∫•y th√¥ng tin user hi·ªán t·∫°i
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth == null || !auth.isAuthenticated() || "anonymousUser".equals(auth.getPrincipal())) {
            redirectAttributes.addFlashAttribute("error", "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc");
            return "redirect:/login";
        }

        String username = auth.getName();
        Optional<Users> userOpt = usersRepository.findByUsername(username);
        
        if (userOpt.isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
            return "redirect:/customer/dashboard";
        }

        Users user = userOpt.get();
        
        // Ki·ªÉm tra n·∫øu ƒë√£ l√† seller r·ªìi
        if ("SELLER".equalsIgnoreCase(user.getUserType())) {
            redirectAttributes.addFlashAttribute("info", "B·∫°n ƒë√£ l√† seller r·ªìi!");
            return "redirect:/seller/dashboard";
        }

        // Ki·ªÉm tra email verification
        if (!Boolean.TRUE.equals(user.getIsEmailVerified())) {
            redirectAttributes.addFlashAttribute("error", "Vui l√≤ng x√°c th·ª±c email tr∆∞·ªõc khi tr·ªü th√†nh seller");
            return "redirect:/customer/dashboard";
        }

        try {
            // N√¢ng c·∫•p role l√™n SELLER
            user.setUserType("SELLER");
            user.setUpdatedAt(LocalDateTime.now());
            usersRepository.save(user);

            // C·∫≠p nh·∫≠t session
            session.setAttribute("userRole", "SELLER");
            
            redirectAttributes.addFlashAttribute("success", "Ch√∫c m·ª´ng! B·∫°n ƒë√£ tr·ªü th√†nh seller th√†nh c√¥ng! üéâ");
            return "redirect:/seller/dashboard";
            
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
            return "redirect:/customer/dashboard";
        }
    }
}

