package banhangrong.su25.Repository;

import banhangrong.su25.Entity.Voucher;
import banhangrong.su25.Entity.Users;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface VoucherRepository extends JpaRepository<Voucher, Long> {

    // Tìm voucher bằng code
    Optional<Voucher> findByCode(String code);

    // Tìm tất cả voucher của một seller
    List<Voucher> findBySellerUserId(Long sellerId);

    // Tìm voucher active của seller
    List<Voucher> findBySellerUserIdAndIsActiveTrue(Long sellerId);

    // Tìm voucher valid (active và trong thời gian hiệu lực)
    @Query("SELECT v FROM Voucher v WHERE v.seller.userId = :sellerId AND v.isActive = true " +
            "AND v.validFrom <= :now AND v.validTo >= :now")
    List<Voucher> findValidVouchersBySeller(@Param("sellerId") Long sellerId, @Param("now") LocalDateTime now);

    // Tìm voucher auto-generated theo type
    List<Voucher> findByIsAutoGeneratedTrueAndAutoGenerationTypeAndIsActiveTrue(
            Voucher.AutoGenerationType autoGenerationType);

    // Kiểm tra voucher code đã tồn tại chưa
    boolean existsByCode(String code);

    // Tìm voucher có thể áp dụng cho order amount
    @Query("SELECT v FROM Voucher v WHERE v.seller.userId = :sellerId AND v.isActive = true " +
            "AND v.validFrom <= :now AND v.validTo >= :now " +
            "AND v.usedCount < v.maxUsage " +
            "AND v.minOrderValue <= :orderAmount")
    List<Voucher> findApplicableVouchers(@Param("sellerId") Long sellerId,
                                         @Param("orderAmount") Double orderAmount,
                                         @Param("now") LocalDateTime now);

    // Thống kê voucher usage
    @Query("SELECT COUNT(v) FROM Voucher v WHERE v.seller.userId = :sellerId")
    Long countBySeller(@Param("sellerId") Long sellerId);

    @Query("SELECT SUM(v.usedCount) FROM Voucher v WHERE v.seller.userId = :sellerId")
    Long sumUsedCountBySeller(@Param("sellerId") Long sellerId);
}